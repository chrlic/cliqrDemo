#!/bin/bash

# ElasticSearch 2.3 configurator 
exec > >(tee -a /usr/local/osmosix/logs/service.log) 2>&1

OSSVC_HOME=/usr/local/osmosix/service
. /usr/local/osmosix/etc/.osmosix.sh
. /usr/local/osmosix/etc/userenv
. $OSSVC_HOME/utils/cfgutil.sh
. $OSSVC_HOME/utils/install_util.sh
. $OSSVC_HOME/utils/os_info_util.sh

cmd=$1
SVCNAME="elasticsearch_2_3"
SVCHOME="$OSSVC_HOME/$SVCNAME"
USER_ENV="/usr/local/osmosix/etc/userenv"

installElasticSearch() {
    log "[INSTALL] OS is : $os "
    log "[INSTALL] Starting $SVCNAME installation"

	log "[INSTALL] Installing java 1.8 package"
	yum -y install java-1.8.0-openjdk.x86_64

	log "[INSTALL] adding firewall rule for ES REST port 9200"
    iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 9200 -j ACCEPT
	service iptables save
	
	log "[INSTALL] installing $SVCNAME into init.d"
	cp init.d/$SVCNAME /etc/init.d
	
#	log "[INSTALL] setting up $SVCNAME for autostart on boot"
#	chkconfig $SVCNAME
	
	

}

startElasticSearchService() {
	/etc/init.d/$SVCNAME start
}

stopElasticSearchService() {
	/etc/init.d/$SVCNAME stop
}

restartElasticSearchService() {
	/etc/init.d/$SVCNAME restart
}

reloadElasticSearchService() {
	/etc/init.d/$SVCNAME reload
}


log() {
	if [ -n "$USE_SERVICE_LOG"  -a "$USE_SERVICE_LOG" == "true" ];then
	    echo "$*"
	else
		logger -t "OSMOSIX" "[$SVCNAME] $*"
	fi
}

# main entry


case $cmd in
	install)
		log "[INSTALL] Installing $SVCNAME"
		installElasticSearch
		;;
	deploy)
		;;
	configure)
		log "[CONFIGURE] Configuring $SVCNAME"
		;;
	start)
	 	log "[START] Mounting storage volumes"
            mountSharedStorages
		log "[START] Invoking pre-start user script"
		if [ ! -z "$cliqrUserScript" -a -f "$cliqrUserScript" ]; then
			$cliqrUserScript 1 $cliqrUserScriptParams
		fi

		log "[START] Starting $SVCNAME"
		startElasticSearchService

		log "[START] Invoking post-start user script"
		if [ ! -z $cliqrUserScript -a -f $cliqrUserScript ]; then
			$cliqrUserScript 2 $cliqrUserScriptParams
		fi
		
		# Run restore script in case of migration
        if [ "$appMigrating" == "true" ]; then
        	runMigrationRestoreScript
    	fi
    	log "[START] $SVCNAME successfully started."
		;;
	stop)
		log "[STOP] Invoking pre-stop user script"
		if [ ! -z $cliqrUserScript -a -f $cliqrUserScript ]; then
			$cliqrUserScript 3 $cliqrUserScriptParams
		fi

		log "[STOP] Stopping $SVCNAME"
		stopElasticSearchService

		log "[STOP] Invoking post-stop user script"
		if [ ! -z $cliqrUserScript -a -f $cliqrUserScript ]; then
			$cliqrUserScript 4 $cliqrUserScriptParams
		fi
		log "[STOP] $SVCNAME successfully stopped."
		;;
	restart)
		log "[RESTART] Invoking pre-restart user script"
		if [ ! -z $cliqrUserScript -a -f $cliqrUserScript ]; then
			$cliqrUserScript 5 $cliqrUserScriptParams
		fi

		log "[RESTART] Restarting $SVCNAME"
		restartElasticSearchService

		log "[RESTART] Invoking post-restart user script"
		if [ ! -z $cliqrUserScript -a -f $cliqrUserScript ]; then
			$cliqrUserScript 6 $cliqrUserScriptParams
		fi
		;;
	reload)
		log "[RELOAD] Invoking pre-reload user script"
		if [ ! -z $cliqrUserScript -a -f $cliqrUserScript ]; then
			$cliqrUserScript 7 $cliqrUserScriptParams
		fi

		log "[RELOAD] Reloding $SVCNAME settings"
		reloadElasticSearchService

		log "[RELOAD] Invoking post-reload user script"
		if [ ! -z $cliqrUserScript -a -f $cliqrUserScript ]; then
			$cliqrUserScript 8 $cliqrUserScriptParams
		fi
		log "[RELOAD] $SVCNAME successfully reloaded."
		;;
	cleanup)

        ;;
    upgrade)

        ;;
	*)
		log "[ERROR] unknown command"
		exit 127
		;;
esac

