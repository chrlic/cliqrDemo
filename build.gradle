plugins {
	id 'com.github.johnrengelman.shadow' version '1.2.3'
	id 'com.bmuschko.docker-java-application' version '3.0.3'
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'application'

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*
import org.gradle.internal.os.OperatingSystem;

sourceCompatibility = 1.5
version = '1.0'
jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': version,
				   'Class-Path': '.'
    }
}

repositories {
    mavenCentral()
	maven { url "https://raw.github.com/chrlic/CloudCenterJavaAPI/master/maven-repos" }
}

configurations {
	ftpAntTask
}


dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
	compile "org.elasticsearch:elasticsearch:2.3.0"
	compile "org.elasticsearch.module:lang-groovy:2.3.0"
	compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.7'
//	compile "org.elasticsearch:elasticsearch-lang-groovy:2.2.0"
	compile "com.sparkjava:spark-core:2.5"
//	compile 'io.advantageous.qbit:qbit-admin:1.6.0.RELEASE'
//	compile 'io.advantageous.qbit:qbit-vertx:1.6.0.RELEASE'
	compile 'org.apache.httpcomponents:httpclient:4.5.2'
	compile 'org.slf4j:slf4j-simple:1.6.1'
	compile 'org.codehaus.gpars:gpars:1.2.1'
//	compile 'com.sparkjava:spark-template-handlebars:2.3'
    testCompile group: 'junit', name: 'junit', version: '4.+'
	
	compile 'com.kohlschutter.junixsocket:junixsocket-common:2.0.4'
	compile 'com.kohlschutter.junixsocket:junixsocket-native-common:2.0.4'
	
	compile 'cz.gargoyle:c3api:1.0'
	
//    ftpAntTask "org.apache.ant:ant-commons-net:1.7.0" 
    ftpAntTask "org.apache.ant:ant-commons-net:1.9.7" 
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

def cliqrServices = "cliqr-services"
def cliqrServicesSrc = "${cliqrServices}/src"
def cliqrServicesBuild = "${cliqrServices}/build"
def dockerImages = "docker-images/individual"
def dockerComposeImages = "docker-images/compose"
def dockerCommand = OperatingSystem.current().isMacOsX() ? "/usr/local/bin/docker" : "docker"
def dockerComposeCommand = OperatingSystem.current().isMacOsX() ? "/usr/local/bin/docker-compose" : "docker-compose"

shadowJar {
	mainClassName = "cz.gargoyle.cliqr.demo.fe.FrontEnd"

	mergeServiceFiles()

	baseName = "BeerStore"
	classifier = null
	version = null
}

shadowJar {
	mainClassName = "cz.gargoyle.cliqr.demo.es.ElasticSearchService"

	mergeServiceFiles()

	baseName = "ElasticSearch_2_3"
	classifier = null
	version = null
}


ant {
	taskdef(name: 'ftp',
	classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
	classpath: configurations.ftpAntTask.asPath)
}


task beerStoreJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
	configurations = [project.configurations.compile]
	from sourceSets.main.output
	
	mergeServiceFiles()
	
	mainClassName = "cz.gargoyle.cliqr.demo.fe.FrontEnd"
	manifest {
		attributes 'Implementation-Title': 'Gradle Quickstart',
				   'Implementation-Version': version,
				   'Class-Path': '.',
				   'Main-Class': mainClassName
	}

	baseName = "BeerStore"
	classifier = null
	version = null
  }

task elasticSearchJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
	configurations = [project.configurations.compile]
	from sourceSets.main.output
	
	mergeServiceFiles()
	
	mainClassName = "cz.gargoyle.cliqr.demo.es.ElasticSearchService"
	manifest {
		attributes 'Implementation-Title': 'Gradle Quickstart',
				   'Implementation-Version': version,
				   'Class-Path': '.',
				   'Main-Class': mainClassName
	}

	baseName = "ElasticSearch_2_3"
	classifier = null
	version = null
  }

task copyBeerStore(type: Copy, dependsOn: beerStoreJar) {
    from(file('build/libs/BeerStore.jar'))
    into("${cliqrServicesSrc}/beer_store/bin")
}


task copyElasticSearch(type: Copy, dependsOn: elasticSearchJar) {
    from(file('build/libs/ElasticSearch_2_3.jar'))
    into("${cliqrServicesSrc}/elasticsearch_2_3/bin")
}

task beerStoreService(type: Zip, dependsOn: copyBeerStore) {
	archiveName = 'beer_store.zip'
	destinationDir = file('cliqr-services/build')
	from ("${cliqrServicesSrc}") {
		include 'beer_store/**'
	}
}

task elasticSearchService(type: Zip, dependsOn: copyElasticSearch) {
	archiveName = 'elasticsearch_2_3.zip'
	destinationDir = file('cliqr-services/build')
	from ("${cliqrServicesSrc}") {
		include 'elasticsearch_2_3/**'
	}
}

task haProxyService(type: Zip) {
	archiveName = 'haproxy_adv.zip'
	destinationDir = file('cliqr-services/build')
	from ("${cliqrServicesSrc}") {
		include 'haproxy_adv/**'
	}
}

task buildAllJars(dependsOn: [beerStoreJar, elasticSearchJar]) {
	
}

task buildAllServices(dependsOn: [beerStoreService, elasticSearchService, haProxyService]) {
	
}

task publishStoreService(dependsOn: beerStoreService) << {

	ant.ftp(action: 'put', server: c3_ftpRepositoryIp, userid: c3_ftpRepositoryUsername,
	password: c3_ftpRepositoryPassword, verbose: true, depends: 'yes', binary: true,
	remotedir: 'beer_store') {
		fileset(dir: cliqrServicesBuild) {
			include(name: 'beer_store.zip')
		}
	}

}

task publishElasticSearchService(dependsOn: elasticSearchService) << {

	ant.ftp(action: 'put', server: c3_ftpRepositoryIp, userid: c3_ftpRepositoryUsername,
	password: c3_ftpRepositoryPassword, verbose: true, depends: 'yes', binary: true,
	remotedir: 'elasticsearch_2_3') {
		fileset(dir: cliqrServicesBuild) {
			include(name: 'elasticsearch_2_3.zip')
		}
	}

}

task publishHaProxyService(dependsOn: haProxyService) << {

	ant.ftp(action: 'put', server: c3_ftpRepositoryIp, userid: c3_ftpRepositoryUsername,
	password: c3_ftpRepositoryPassword, verbose: true, depends: true, binary: true,
	remotedir: 'haproxy_adv') {
		fileset(dir: cliqrServicesBuild) {
			include(name: 'haproxy_adv.zip')
		}
	}

}

task publishServices(dependsOn: [publishStoreService, publishElasticSearchService, publishHaProxyService] ) {
	println "Building with repository ${c3_ftpRepositoryIp}"
}

task copyBeerStoreForContainer(type: Copy, dependsOn: beerStoreJar) {
	from(file('build/libs/BeerStore.jar'))
	into("${dockerImages}/beerStore")
}


task copyElasticSearchForContainer(type: Copy, dependsOn: elasticSearchJar) {
	from(file('build/libs/ElasticSearch_2_3.jar'))
	into("${dockerImages}/elasticsearch")
}

task beerStoreContainerImage(type: Exec, dependsOn: copyBeerStoreForContainer) {
	workingDir "${dockerImages}/beerStore"
	commandLine "${dockerCommand}", "build", "-t", "beer_store", "."
}

task elasticSearchContainerImage(type: Exec, dependsOn: copyElasticSearchForContainer) {
	workingDir "${dockerImages}/elasticsearch"
	commandLine "${dockerCommand}", "build", "-t", "elasticsearch", "."
}

task buildAllContainerImages(dependsOn: [beerStoreContainerImage, elasticSearchContainerImage]) {
	
}

task copyBeerStoreForCompose(type: Copy, dependsOn: beerStoreJar) {
	from(file('build/libs/BeerStore.jar'))
	into("${dockerComposeImages}/fullBeerStore/beerStore")
}


task copyElasticSearchForCompose(type: Copy, dependsOn: elasticSearchJar) {
	from(file('build/libs/ElasticSearch_2_3.jar'))
	into("${dockerComposeImages}/fullBeerStore/elasticsearch")
}

task buildFullStoreCompose(type: Exec, dependsOn: [copyBeerStoreForCompose, copyElasticSearchForCompose]) {
	workingDir "${dockerComposeImages}/fullBeerStore"
	commandLine "${dockerComposeCommand}", "build"

}

task runTestContainerApp (type: Exec, dependsOn: buildFullStoreCompose) {
	workingDir "${dockerComposeImages}/fullBeerStore"
	commandLine "${dockerComposeCommand}", "up", "-d"
}

task sleepSeconds {
	doLast {
		sleep (20 * 1000)
	}
}

task collectContainerLogs (type: Exec) {
	workingDir "${dockerComposeImages}/fullBeerStore"
	commandLine "${dockerComposeCommand}", "logs"
}

task stopTestContainerApp (type: Exec) {
	workingDir "${dockerComposeImages}/fullBeerStore"
	commandLine "${dockerComposeCommand}", "stop"
}

task testTransaction (type: Exec) {		
	workingDir "${dockerComposeImages}/fullBeerStore"
	commandLine "curl", "http://localhost/order"	
}

task testContainerApp (dependsOn: runTestContainerApp) {
	doLast {
		tasks.sleepSeconds.execute()
		tasks.collectContainerLogs.execute()
		tasks.testTransaction.execute()
		tasks.stopTestContainerApp.execute()
	}
}

task testC3App(type:JavaExec, dependsOn: publishServices) {

		main = 'cz.gargoyle.cliqr.demo.fe.TestC3App'
		classpath = sourceSets.main.runtimeClasspath
		classpath = classpath.add(sourceSets.test.runtimeClasspath)
		
		//classpath = "${cliqrServicesSrc}/beer_store/bin/BeerStore.jar"

}